// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetClinicServer.Models;

#nullable disable

namespace VetClinicServer.Migrations
{
    [DbContext(typeof(VetClinicContext))]
    [Migration("20231113160407_SeedPatientAndDoctorData")]
    partial class SeedPatientAndDoctorData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Ukrainian_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicationPrescription", b =>
                {
                    b.Property<int>("MedicationsMedicationId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionsPrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("MedicationsMedicationId", "PrescriptionsPrescriptionId");

                    b.HasIndex("PrescriptionsPrescriptionId");

                    b.ToTable("MedicationPrescription");
                });

            modelBuilder.Entity("VetClinicServer.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctorId");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("VetClinicServer.Models.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("appointmentTypeId");

                    b.Property<string>("AppointmentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("appointmentTypeName");

                    b.HasKey("AppointmentTypeId");

                    b.ToTable("AppointmentTypes");
                });

            modelBuilder.Entity("VetClinicServer.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("billId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctorId");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.HasKey("BillId")
                        .HasName("PK_Invoices_1");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("VetClinicServer.Models.BillStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("statusName")
                        .IsFixedLength();

                    b.HasKey("StatusId");

                    b.ToTable("BillStatus");
                });

            modelBuilder.Entity("VetClinicServer.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("postalCode");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Address = "609 Lynch Roads, Stokeston, Luxembourg",
                            Email = "Yesenia.Parker@gmail.com",
                            FirstName = "Delores",
                            LastName = "Brown",
                            PhoneNumber = "564-839-1602",
                            PostalCode = "77901-3717"
                        },
                        new
                        {
                            ClientId = 2,
                            Address = "21149 Terry Squares, Lake Una, Brazil",
                            Email = "Fabiola.Pouros@gmail.com",
                            FirstName = "Judy",
                            LastName = "Goodwin",
                            PhoneNumber = "934-766-4235",
                            PostalCode = "09460-1203"
                        },
                        new
                        {
                            ClientId = 3,
                            Address = "2471 Annetta Drive, Lake Zellaborough, Western Sahara",
                            Email = "Aleen87@gmail.com",
                            FirstName = "Jerad",
                            LastName = "Hammes",
                            PhoneNumber = "233-530-6887",
                            PostalCode = "31134"
                        },
                        new
                        {
                            ClientId = 4,
                            Address = "522 Ferry Burg, Lazaroville, Monaco",
                            Email = "Arnoldo_Walsh@gmail.com",
                            FirstName = "Macey",
                            LastName = "Steuber",
                            PhoneNumber = "756-910-0102",
                            PostalCode = "18690-3271"
                        },
                        new
                        {
                            ClientId = 5,
                            Address = "644 Gutmann Trafficway, Ewaldbury, Tanzania",
                            Email = "Seamus73@hotmail.com",
                            FirstName = "Marjolaine",
                            LastName = "Haley",
                            PhoneNumber = "419-680-3873",
                            PostalCode = "37750-3380"
                        },
                        new
                        {
                            ClientId = 6,
                            Address = "4993 Orn Lock, Bednarbury, Botswana",
                            Email = "Dakota.Kiehn23@hotmail.com",
                            FirstName = "Ephraim",
                            LastName = "Hansen",
                            PhoneNumber = "729-833-1094",
                            PostalCode = "12910"
                        },
                        new
                        {
                            ClientId = 7,
                            Address = "06446 Stephan Divide, Lake Angelicaport, Belize",
                            Email = "Diego.Gulgowski@yahoo.com",
                            FirstName = "Marley",
                            LastName = "Schuster",
                            PhoneNumber = "458-260-3462",
                            PostalCode = "31537-1697"
                        },
                        new
                        {
                            ClientId = 8,
                            Address = "642 Rhiannon Harbor, Waylonville, Botswana",
                            Email = "Florence40@yahoo.com",
                            FirstName = "Betty",
                            LastName = "Batz",
                            PhoneNumber = "381-566-1362",
                            PostalCode = "14025-4197"
                        },
                        new
                        {
                            ClientId = 9,
                            Address = "013 Fredy Pass, East Jaedenstad, Vanuatu",
                            Email = "Silas85@gmail.com",
                            FirstName = "Kasandra",
                            LastName = "Langworth",
                            PhoneNumber = "554-971-1346",
                            PostalCode = "62837"
                        },
                        new
                        {
                            ClientId = 10,
                            Address = "204 Jamison Rue, Jabarifurt, Turkmenistan",
                            Email = "Hannah28@yahoo.com",
                            FirstName = "Leola",
                            LastName = "Glover",
                            PhoneNumber = "237-265-2464",
                            PostalCode = "21749-0121"
                        },
                        new
                        {
                            ClientId = 11,
                            Address = "59776 Tremblay Dale, Connellybury, Mali",
                            Email = "Danika14@gmail.com",
                            FirstName = "Audreanne",
                            LastName = "Rolfson",
                            PhoneNumber = "358-799-6719",
                            PostalCode = "98166"
                        },
                        new
                        {
                            ClientId = 12,
                            Address = "0638 Erika Club, Minnieside, Cameroon",
                            Email = "Estell_Haley@hotmail.com",
                            FirstName = "Opal",
                            LastName = "Konopelski",
                            PhoneNumber = "325-317-2157",
                            PostalCode = "40565-9746"
                        },
                        new
                        {
                            ClientId = 13,
                            Address = "958 Misael Ferry, Lake Dulcefurt, Saint Helena",
                            Email = "Ella92@hotmail.com",
                            FirstName = "Jairo",
                            LastName = "Spinka",
                            PhoneNumber = "833-866-4282",
                            PostalCode = "37814"
                        },
                        new
                        {
                            ClientId = 14,
                            Address = "4734 Louisa Village, Constantinberg, Denmark",
                            Email = "Demetrius.Thompson@hotmail.com",
                            FirstName = "Shaniya",
                            LastName = "Price",
                            PhoneNumber = "680-551-5037",
                            PostalCode = "32480"
                        },
                        new
                        {
                            ClientId = 15,
                            Address = "9150 Schinner River, Nikolasbury, Cameroon",
                            Email = "Grayson_Rempel34@yahoo.com",
                            FirstName = "Marilie",
                            LastName = "Weissnat",
                            PhoneNumber = "962-837-0947",
                            PostalCode = "06683"
                        },
                        new
                        {
                            ClientId = 16,
                            Address = "69635 Rosie Way, New Camila, Luxembourg",
                            Email = "Jared.Hansen54@hotmail.com",
                            FirstName = "Kenya",
                            LastName = "Pfeffer",
                            PhoneNumber = "329-569-9300",
                            PostalCode = "15395"
                        },
                        new
                        {
                            ClientId = 17,
                            Address = "610 Felipe Islands, Nedchester, Burundi",
                            Email = "Bennett56@hotmail.com",
                            FirstName = "Guido",
                            LastName = "Price",
                            PhoneNumber = "252-567-0476",
                            PostalCode = "75928"
                        },
                        new
                        {
                            ClientId = 18,
                            Address = "9324 Samara Cliffs, North Miles, Bulgaria",
                            Email = "Ursula.Bergstrom94@hotmail.com",
                            FirstName = "Fredy",
                            LastName = "Bahringer",
                            PhoneNumber = "368-870-6039",
                            PostalCode = "51825-2930"
                        },
                        new
                        {
                            ClientId = 19,
                            Address = "4875 Von Streets, Wittingview, Trinidad and Tobago",
                            Email = "Yoshiko_Kris50@gmail.com",
                            FirstName = "Deondre",
                            LastName = "D'Amore",
                            PhoneNumber = "834-646-1971",
                            PostalCode = "56029-5896"
                        },
                        new
                        {
                            ClientId = 20,
                            Address = "2652 Botsford Spring, Cortezburgh, Slovenia",
                            Email = "Immanuel_Dach6@gmail.com",
                            FirstName = "Jaycee",
                            LastName = "Schoen",
                            PhoneNumber = "569-598-4892",
                            PostalCode = "57752"
                        },
                        new
                        {
                            ClientId = 21,
                            Address = "405 Earline Crescent, Port Berneiceville, Dominican Republic",
                            Email = "Mollie_Stracke@hotmail.com",
                            FirstName = "Kyla",
                            LastName = "Shields",
                            PhoneNumber = "873-977-6607",
                            PostalCode = "62153"
                        },
                        new
                        {
                            ClientId = 22,
                            Address = "17865 Glover Pine, Rodrigoberg, Belize",
                            Email = "Amina_Hyatt@hotmail.com",
                            FirstName = "Louvenia",
                            LastName = "Okuneva",
                            PhoneNumber = "285-516-6394",
                            PostalCode = "60450"
                        },
                        new
                        {
                            ClientId = 23,
                            Address = "14250 Doyle Field, Robbiehaven, Malaysia",
                            Email = "Michael.Swaniawski@hotmail.com",
                            FirstName = "Dasia",
                            LastName = "Kling",
                            PhoneNumber = "666-551-7336",
                            PostalCode = "06341-3558"
                        },
                        new
                        {
                            ClientId = 24,
                            Address = "10718 Kelsi Valley, New Guiseppe, Seychelles",
                            Email = "Odessa27@yahoo.com",
                            FirstName = "Larry",
                            LastName = "Gerlach",
                            PhoneNumber = "491-909-2387",
                            PostalCode = "17988-1145"
                        },
                        new
                        {
                            ClientId = 25,
                            Address = "794 Ryan Divide, Cummeratamouth, Pitcairn Islands",
                            Email = "Kaylee.Ryan@gmail.com",
                            FirstName = "Kiana",
                            LastName = "Berge",
                            PhoneNumber = "745-464-3787",
                            PostalCode = "55668-7955"
                        },
                        new
                        {
                            ClientId = 26,
                            Address = "010 Parker Alley, South Adriana, Nicaragua",
                            Email = "Benedict91@hotmail.com",
                            FirstName = "Shaina",
                            LastName = "Swaniawski",
                            PhoneNumber = "957-210-5976",
                            PostalCode = "83906"
                        },
                        new
                        {
                            ClientId = 27,
                            Address = "3942 Cletus Avenue, Jamarcuston, Luxembourg",
                            Email = "Soledad_Smith@gmail.com",
                            FirstName = "Michale",
                            LastName = "O'Conner",
                            PhoneNumber = "707-440-0961",
                            PostalCode = "38822"
                        },
                        new
                        {
                            ClientId = 28,
                            Address = "5445 Litzy Divide, Handberg, Micronesia",
                            Email = "Magali3@gmail.com",
                            FirstName = "Destini",
                            LastName = "Windler",
                            PhoneNumber = "840-657-2761",
                            PostalCode = "84455"
                        },
                        new
                        {
                            ClientId = 29,
                            Address = "49528 Emiliano View, Lake Wilbertchester, Puerto Rico",
                            Email = "Helen_Erdman@yahoo.com",
                            FirstName = "Haylie",
                            LastName = "Ryan",
                            PhoneNumber = "464-888-4077",
                            PostalCode = "06380-9432"
                        },
                        new
                        {
                            ClientId = 30,
                            Address = "66819 Sipes Ville, Demetriusstad, Fiji",
                            Email = "Keyshawn.Ratke@gmail.com",
                            FirstName = "Lauriane",
                            LastName = "Kozey",
                            PhoneNumber = "771-920-9125",
                            PostalCode = "20537"
                        });
                });

            modelBuilder.Entity("VetClinicServer.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("doctorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("postalCode");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Address = "6571 Feil Rue, Lake Humbertoborough, Maldives",
                            FirstName = "Aryanna",
                            LastName = "Brekke",
                            PostalCode = "53669-5034",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 2,
                            Address = "3116 Robel Ridge, Johnathonhaven, Montenegro",
                            FirstName = "Trudie",
                            LastName = "Orn",
                            PostalCode = "57541",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorId = 3,
                            Address = "25568 Schaefer Prairie, South Elissa, Puerto Rico",
                            FirstName = "Jamie",
                            LastName = "Bins",
                            PostalCode = "80482",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            Address = "28503 Douglas Way, West Noelside, Tunisia",
                            FirstName = "Sophia",
                            LastName = "Schoen",
                            PostalCode = "90278",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 5,
                            Address = "48043 Ardith Prairie, South Myrticetown, Madagascar",
                            FirstName = "Timothy",
                            LastName = "Pacocha",
                            PostalCode = "06517",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorId = 6,
                            Address = "711 Garland Court, East Jabarichester, Serbia",
                            FirstName = "Ocie",
                            LastName = "Harber",
                            PostalCode = "12409",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 7,
                            Address = "3241 Agustina Locks, Kertzmannview, Virgin Islands, U.S.",
                            FirstName = "Rosalee",
                            LastName = "Maggio",
                            PostalCode = "98473-9818",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 8,
                            Address = "615 Haley Park, Considineberg, Falkland Islands (Malvinas)",
                            FirstName = "Celestine",
                            LastName = "Barrows",
                            PostalCode = "55849",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorId = 9,
                            Address = "27842 Wanda Extension, West Domenic, Sweden",
                            FirstName = "Reed",
                            LastName = "Wolf",
                            PostalCode = "71535",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorId = 10,
                            Address = "1356 Kohler Green, Evansborough, Guinea-Bissau",
                            FirstName = "Hector",
                            LastName = "Conroy",
                            PostalCode = "52612-2613",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorId = 11,
                            Address = "209 Smitham Tunnel, Jessystad, South Africa",
                            FirstName = "Madalyn",
                            LastName = "Howe",
                            PostalCode = "89296-6639",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorId = 12,
                            Address = "793 Kertzmann Harbors, Lake Clemens, Bhutan",
                            FirstName = "Celia",
                            LastName = "Terry",
                            PostalCode = "79832",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorId = 13,
                            Address = "789 Marietta Turnpike, Coltshire, American Samoa",
                            FirstName = "Bryon",
                            LastName = "Kemmer",
                            PostalCode = "86034-7170",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorId = 14,
                            Address = "27070 Jasmin Tunnel, Wolffbury, Kuwait",
                            FirstName = "Keyshawn",
                            LastName = "Larson",
                            PostalCode = "52747",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 15,
                            Address = "33179 Leffler Junctions, North Imaton, Tonga",
                            FirstName = "Kaylie",
                            LastName = "Quitzon",
                            PostalCode = "93169-4740",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 16,
                            Address = "096 Lamont Way, East Christa, Suriname",
                            FirstName = "Burdette",
                            LastName = "Considine",
                            PostalCode = "90558",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorId = 17,
                            Address = "906 Nikolas Lane, Lake Lillianaborough, Portugal",
                            FirstName = "Justina",
                            LastName = "Kiehn",
                            PostalCode = "12265-5532",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorId = 18,
                            Address = "27322 Gulgowski Divide, Tiffanytown, French Polynesia",
                            FirstName = "Lyla",
                            LastName = "Waters",
                            PostalCode = "51801-6748",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorId = 19,
                            Address = "35177 Davis Place, Ortizbury, New Zealand",
                            FirstName = "Cheyenne",
                            LastName = "O'Kon",
                            PostalCode = "82316-7993",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorId = 20,
                            Address = "662 Connelly Mill, East Rudolph, Eritrea",
                            FirstName = "Valentine",
                            LastName = "Hermiston",
                            PostalCode = "55878",
                            Specialization = 0
                        });
                });

            modelBuilder.Entity("VetClinicServer.Models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<int?>("RecordTypeId")
                        .HasColumnType("int")
                        .HasColumnName("recordTypeId");

                    b.HasKey("RecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RecordTypeId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("VetClinicServer.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("MedicationId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("VetClinicServer.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("breed");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("species");

                    b.HasKey("PatientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Breed = "Angora",
                            ClientId = 10,
                            DateOfBirth = new DateTime(2018, 3, 27, 8, 47, 55, 345, DateTimeKind.Local).AddTicks(7356),
                            Name = "Arlene",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 2,
                            Breed = "Poodle",
                            ClientId = 21,
                            DateOfBirth = new DateTime(2015, 2, 15, 20, 23, 41, 341, DateTimeKind.Local).AddTicks(9226),
                            Name = "Maya",
                            Species = "Dog"
                        },
                        new
                        {
                            PatientId = 3,
                            Breed = "Cockatiel",
                            ClientId = 15,
                            DateOfBirth = new DateTime(2017, 5, 7, 3, 0, 3, 633, DateTimeKind.Local).AddTicks(4998),
                            Name = "Jeremy",
                            Species = "Dog"
                        },
                        new
                        {
                            PatientId = 4,
                            Breed = "Angora",
                            ClientId = 22,
                            DateOfBirth = new DateTime(2021, 9, 17, 14, 12, 23, 60, DateTimeKind.Local).AddTicks(4224),
                            Name = "Burley",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 5,
                            Breed = "Lionhead",
                            ClientId = 9,
                            DateOfBirth = new DateTime(2020, 10, 26, 20, 43, 50, 815, DateTimeKind.Local).AddTicks(3136),
                            Name = "Casey",
                            Species = "Hamster"
                        },
                        new
                        {
                            PatientId = 6,
                            Breed = "Maine Coon",
                            ClientId = 19,
                            DateOfBirth = new DateTime(2022, 8, 17, 21, 2, 7, 617, DateTimeKind.Local).AddTicks(5743),
                            Name = "Ernest",
                            Species = "Cat"
                        },
                        new
                        {
                            PatientId = 7,
                            Breed = "Maine Coon",
                            ClientId = 26,
                            DateOfBirth = new DateTime(2023, 1, 30, 19, 8, 21, 324, DateTimeKind.Local).AddTicks(5247),
                            Name = "Brain",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 8,
                            Breed = "Poodle",
                            ClientId = 9,
                            DateOfBirth = new DateTime(2021, 2, 24, 10, 20, 46, 231, DateTimeKind.Local).AddTicks(3141),
                            Name = "Jeramy",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 9,
                            Breed = "Beagle",
                            ClientId = 25,
                            DateOfBirth = new DateTime(2015, 5, 12, 23, 22, 45, 414, DateTimeKind.Local).AddTicks(5846),
                            Name = "Harmony",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 10,
                            Breed = "Poodle",
                            ClientId = 11,
                            DateOfBirth = new DateTime(2020, 3, 17, 15, 38, 41, 866, DateTimeKind.Local).AddTicks(8254),
                            Name = "Wilson",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 11,
                            Breed = "Finch",
                            ClientId = 12,
                            DateOfBirth = new DateTime(2015, 1, 11, 20, 16, 7, 568, DateTimeKind.Local).AddTicks(7081),
                            Name = "Alfred",
                            Species = "Cat"
                        },
                        new
                        {
                            PatientId = 12,
                            Breed = "Finch",
                            ClientId = 28,
                            DateOfBirth = new DateTime(2020, 11, 27, 3, 59, 0, 268, DateTimeKind.Local).AddTicks(522),
                            Name = "Opal",
                            Species = "Hamster"
                        },
                        new
                        {
                            PatientId = 13,
                            Breed = "Syrian",
                            ClientId = 4,
                            DateOfBirth = new DateTime(2021, 3, 27, 12, 24, 12, 344, DateTimeKind.Local).AddTicks(883),
                            Name = "Kirstin",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 14,
                            Breed = "Parrot",
                            ClientId = 25,
                            DateOfBirth = new DateTime(2015, 12, 21, 13, 19, 20, 165, DateTimeKind.Local).AddTicks(2566),
                            Name = "Hassan",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 15,
                            Breed = "Bulldog",
                            ClientId = 3,
                            DateOfBirth = new DateTime(2014, 7, 21, 6, 34, 17, 660, DateTimeKind.Local).AddTicks(905),
                            Name = "Schuyler",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 16,
                            Breed = "Persian",
                            ClientId = 26,
                            DateOfBirth = new DateTime(2018, 12, 24, 5, 1, 17, 502, DateTimeKind.Local).AddTicks(1050),
                            Name = "Elyssa",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 17,
                            Breed = "Maine Coon",
                            ClientId = 11,
                            DateOfBirth = new DateTime(2016, 4, 7, 5, 23, 32, 798, DateTimeKind.Local).AddTicks(8678),
                            Name = "Vincent",
                            Species = "Cat"
                        },
                        new
                        {
                            PatientId = 18,
                            Breed = "Maine Coon",
                            ClientId = 30,
                            DateOfBirth = new DateTime(2016, 12, 19, 13, 27, 59, 666, DateTimeKind.Local).AddTicks(4492),
                            Name = "Deangelo",
                            Species = "Dog"
                        },
                        new
                        {
                            PatientId = 19,
                            Breed = "Sphynx",
                            ClientId = 15,
                            DateOfBirth = new DateTime(2020, 4, 28, 1, 23, 56, 192, DateTimeKind.Local).AddTicks(9576),
                            Name = "Clifton",
                            Species = "Dog"
                        },
                        new
                        {
                            PatientId = 20,
                            Breed = "Cockatiel",
                            ClientId = 4,
                            DateOfBirth = new DateTime(2016, 9, 3, 0, 51, 47, 533, DateTimeKind.Local).AddTicks(7358),
                            Name = "Camila",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 21,
                            Breed = "Dutch",
                            ClientId = 24,
                            DateOfBirth = new DateTime(2018, 7, 10, 19, 35, 21, 72, DateTimeKind.Local).AddTicks(2383),
                            Name = "Clementine",
                            Species = "Hamster"
                        },
                        new
                        {
                            PatientId = 22,
                            Breed = "Lionhead",
                            ClientId = 19,
                            DateOfBirth = new DateTime(2015, 11, 15, 15, 39, 21, 577, DateTimeKind.Local).AddTicks(2792),
                            Name = "Bella",
                            Species = "Dog"
                        },
                        new
                        {
                            PatientId = 23,
                            Breed = "Bulldog",
                            ClientId = 20,
                            DateOfBirth = new DateTime(2019, 6, 23, 0, 54, 30, 314, DateTimeKind.Local).AddTicks(7131),
                            Name = "Edison",
                            Species = "Rabbit"
                        },
                        new
                        {
                            PatientId = 24,
                            Breed = "Dwarf",
                            ClientId = 3,
                            DateOfBirth = new DateTime(2014, 9, 21, 19, 41, 12, 669, DateTimeKind.Local).AddTicks(4544),
                            Name = "Reagan",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 25,
                            Breed = "Bulldog",
                            ClientId = 21,
                            DateOfBirth = new DateTime(2015, 10, 8, 23, 35, 43, 129, DateTimeKind.Local).AddTicks(8567),
                            Name = "Mohammad",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 26,
                            Breed = "Winter White",
                            ClientId = 9,
                            DateOfBirth = new DateTime(2019, 6, 5, 19, 53, 42, 743, DateTimeKind.Local).AddTicks(6035),
                            Name = "Joshuah",
                            Species = "Cat"
                        },
                        new
                        {
                            PatientId = 27,
                            Breed = "German Shepherd",
                            ClientId = 27,
                            DateOfBirth = new DateTime(2020, 2, 27, 17, 52, 6, 403, DateTimeKind.Local).AddTicks(1734),
                            Name = "Laurel",
                            Species = "Cat"
                        },
                        new
                        {
                            PatientId = 28,
                            Breed = "Poodle",
                            ClientId = 9,
                            DateOfBirth = new DateTime(2013, 12, 11, 7, 43, 34, 601, DateTimeKind.Local).AddTicks(1599),
                            Name = "Hilbert",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 29,
                            Breed = "Bulldog",
                            ClientId = 10,
                            DateOfBirth = new DateTime(2022, 12, 26, 5, 42, 36, 139, DateTimeKind.Local).AddTicks(8646),
                            Name = "Iliana",
                            Species = "Bird"
                        },
                        new
                        {
                            PatientId = 30,
                            Breed = "Beagle",
                            ClientId = 1,
                            DateOfBirth = new DateTime(2016, 11, 4, 5, 32, 9, 634, DateTimeKind.Local).AddTicks(306),
                            Name = "Nikko",
                            Species = "Hamster"
                        },
                        new
                        {
                            PatientId = 31,
                            Breed = "Dutch",
                            ClientId = 22,
                            DateOfBirth = new DateTime(2017, 5, 6, 19, 3, 11, 827, DateTimeKind.Local).AddTicks(390),
                            Name = "Darryl",
                            Species = "Hamster"
                        },
                        new
                        {
                            PatientId = 32,
                            Breed = "Winter White",
                            ClientId = 17,
                            DateOfBirth = new DateTime(2015, 6, 29, 21, 24, 13, 955, DateTimeKind.Local).AddTicks(4768),
                            Name = "Gerard",
                            Species = "Hamster"
                        });
                });

            modelBuilder.Entity("VetClinicServer.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prescriptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctorId");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("VetClinicServer.Models.RecordType", b =>
                {
                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int")
                        .HasColumnName("recordTypeId");

                    b.Property<string>("RecordTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("recordTypeName");

                    b.HasKey("RecordTypeId");

                    b.ToTable("RecordTypes");
                });

            modelBuilder.Entity("MedicationPrescription", b =>
                {
                    b.HasOne("VetClinicServer.Models.Medication", null)
                        .WithMany()
                        .HasForeignKey("MedicationsMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinicServer.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionsPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinicServer.Models.Appointment", b =>
                {
                    b.HasOne("VetClinicServer.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Doctors");

                    b.HasOne("VetClinicServer.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Patients");

                    b.HasOne("VetClinicServer.Models.AppointmentType", "Type")
                        .WithMany("Appointments")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Appointments_AppointmentTypes");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("VetClinicServer.Models.Bill", b =>
                {
                    b.HasOne("VetClinicServer.Models.Doctor", "Doctor")
                        .WithMany("Bills")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Bills_Doctors");

                    b.HasOne("VetClinicServer.Models.Patient", "Patient")
                        .WithMany("Bills")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Bills_Patients");

                    b.HasOne("VetClinicServer.Models.BillStatus", "Status")
                        .WithMany("Bills")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Bills_BillStatus");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("VetClinicServer.Models.MedicalRecord", b =>
                {
                    b.HasOne("VetClinicServer.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecords_Patients");

                    b.HasOne("VetClinicServer.Models.RecordType", "RecordType")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("RecordTypeId")
                        .HasConstraintName("FK_MedicalRecords_RecordTypes1");

                    b.Navigation("Patient");

                    b.Navigation("RecordType");
                });

            modelBuilder.Entity("VetClinicServer.Models.Patient", b =>
                {
                    b.HasOne("VetClinicServer.Models.Client", "Client")
                        .WithMany("Patients")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Patients_Clients");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("VetClinicServer.Models.Prescription", b =>
                {
                    b.HasOne("VetClinicServer.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_Doctors");

                    b.HasOne("VetClinicServer.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_Patients");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VetClinicServer.Models.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VetClinicServer.Models.BillStatus", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("VetClinicServer.Models.Client", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("VetClinicServer.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Bills");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("VetClinicServer.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Bills");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("VetClinicServer.Models.RecordType", b =>
                {
                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
